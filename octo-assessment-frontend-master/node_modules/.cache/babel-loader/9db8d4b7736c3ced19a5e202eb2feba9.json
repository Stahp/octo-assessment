{"ast":null,"code":"import { FETCH_SPACES_REQUEST, FETCH_SPACES_SUCCESS, FETCH_SPACES_FAILURE } from './spaceTypes';\nimport axios from 'axios';\nimport { ZUUL_URL, ASSESSMENT_SERVICE_URL } from '../../resources/api';\n\nconst fetchSpacesRequest = () => {\n  return {\n    type: FETCH_SPACES_REQUEST\n  };\n};\n\nconst fetchSpacesSuccess = spaces => {\n  return {\n    type: FETCH_SPACES_SUCCESS,\n    payload: spaces\n  };\n};\n\nconst fetchSpacesFailure = error => {\n  return {\n    type: FETCH_SPACES_FAILURE,\n    payload: error\n  };\n};\n\nexport const fetchSpaces = token => {\n  return dispatch => {\n    dispatch(fetchSpacesRequest);\n    axios.get(ASSESSMENT_SERVICE_URL + 'spaces', {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(response => {\n      const spaces = response.data._embedded.spaces;\n      dispatch(fetchSpacesSuccess(spaces));\n    }).catch(error => {\n      const errorMsg = error.message;\n      dispatch(fetchSpacesFailure(errorMsg));\n    });\n  };\n};\nexport const fetchSpaceById = (token, id) => {\n  return dispatch => {\n    dispatch(fetchSpacesRequest);\n    axios.get(ASSESSMENT_SERVICE_URL + `spaces/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(response => {\n      debugger;\n      const spaces = response.data._embedded.spaces;\n      dispatch(fetchSpacesSuccess(spaces));\n    }).catch(error => {\n      const errorMsg = error.message;\n      dispatch(fetchSpacesFailure(errorMsg));\n    });\n  };\n};\nexport const insertSpace = (token, space) => {\n  return dispatch => {\n    axios.post(ASSESSMENT_SERVICE_URL + 'spaces', {\n      name: space.name,\n      description: space.description\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(response => {\n      console.log(\"All Good !\");\n    }).catch(error => {\n      console.log(\"error\");\n    });\n  };\n};\nexport const deleteSpace = (token, id) => {\n  return dispatch => {\n    axios.delete(ASSESSMENT_SERVICE_URL + 'spaces' + id, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(response => {\n      console.log(response);\n    }).catch(error => {\n      console.log(error.message);\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/mouss/OneDrive/Desktop/octo-assessment/octo-assessment-frontend-master/src/redux/space/spaceActions.js"],"names":["FETCH_SPACES_REQUEST","FETCH_SPACES_SUCCESS","FETCH_SPACES_FAILURE","axios","ZUUL_URL","ASSESSMENT_SERVICE_URL","fetchSpacesRequest","type","fetchSpacesSuccess","spaces","payload","fetchSpacesFailure","error","fetchSpaces","token","dispatch","get","headers","then","response","data","_embedded","catch","errorMsg","message","fetchSpaceById","id","insertSpace","space","post","name","description","console","log","deleteSpace","delete"],"mappings":"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","sourcesContent":["import {\n    FETCH_SPACES_REQUEST,\n    FETCH_SPACES_SUCCESS,\n    FETCH_SPACES_FAILURE,\n} from './spaceTypes';\n\nimport axios from 'axios';\nimport { ZUUL_URL, ASSESSMENT_SERVICE_URL } from '../../resources/api';\n\nconst fetchSpacesRequest = () => {\n    return {\n        type: FETCH_SPACES_REQUEST\n    }\n}\n\nconst fetchSpacesSuccess = spaces => {\n    return {\n        type: FETCH_SPACES_SUCCESS,\n        payload: spaces\n    }\n}\n\nconst fetchSpacesFailure = error => {\n    return {\n        type: FETCH_SPACES_FAILURE,\n        payload: error\n    }\n}\n\n\nexport const fetchSpaces = (token) => {\n    return (dispatch) => {\n        dispatch(fetchSpacesRequest)\n        axios\n            .get(ASSESSMENT_SERVICE_URL + 'spaces', {\n                headers: {\n                    'Authorization':`Bearer ${token}`\n                }\n            })\n            .then(response => {\n                const spaces = response.data._embedded.spaces;\n                dispatch(fetchSpacesSuccess(spaces));\n            })\n            .catch(error => {\n                const errorMsg = error.message;\n                dispatch(fetchSpacesFailure(errorMsg));\n            })\n    }\n}\n\nexport const fetchSpaceById = (token, id) => {\n    return (dispatch) => {\n        dispatch(fetchSpacesRequest)\n        axios\n            .get(ASSESSMENT_SERVICE_URL + `spaces/${id}`, {\n                headers: {\n                    'Authorization':`Bearer ${token}`\n                }\n            })\n            .then(response => {\n              debugger;\n                const spaces = response.data._embedded.spaces;\n                dispatch(fetchSpacesSuccess(spaces));\n            })\n            .catch(error => {\n                const errorMsg = error.message;\n                dispatch(fetchSpacesFailure(errorMsg));\n            })\n    }\n}\n\nexport const insertSpace = (token, space) => {\n    return (dispatch) => {\n        axios\n            .post(ASSESSMENT_SERVICE_URL + 'spaces', {\n                name: space.name,\n                description: space.description}, {\n                headers: {\n                    'Authorization':`Bearer ${token}`\n                }\n            })\n            .then(response => {\n                console.log(\"All Good !\");\n            })\n            .catch(error => {\n                console.log(\"error\");\n            })\n    }\n}\n\nexport const deleteSpace = (token, id) => {\n    return (dispatch) => {\n        axios\n            .delete(ASSESSMENT_SERVICE_URL + 'spaces' + id, {\n                headers: {\n                    'Authorization':`Bearer ${token}`\n                }\n            })\n            .then(response => {\n                console.log(response);\n            })\n            .catch(error => {\n                console.log(error.message);\n            })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}